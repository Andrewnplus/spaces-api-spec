---
openapi: "3.0.0"
info:
  title: "Spaces API"
  version: "1.0.0"
  description: "API for managing events, coding problems, books, and quotes."
servers:
- url: "https://api.example.com"
paths:
  /events:
    get:
      summary: "Get all events with optional filters"
      operationId: "getAllEvents"
      parameters:
      - name: "category"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "date"
        in: "query"
        required: false
        schema:
          type: "string"
          format: "date"
      responses:
        "200":
          description: "A list of events"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Event"
    post:
      summary: "Add a new event"
      operationId: "addEvent"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: "Event created"
  /events/{id}:
    get:
      summary: "Get event by ID"
      operationId: "getEvent"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "Event details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "404":
          description: "Event not found"
  /coding-problems:
    get:
      summary: "Get all coding problems"
      operationId: "getAllCodingProblems"
      responses:
        "200":
          description: "A list of coding problems"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CodingProblem"
  /coding-problems/{id}:
    get:
      summary: "Get a coding problem by ID"
      operationId: "getCodingProblem"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "Coding problem details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodingProblem"
        "404":
          description: "Problem not found"
  /books:
    get:
      summary: "Get all books with optional filters"
      operationId: "getAllBooks"
      parameters:
      - name: "author"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "category"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "A list of books"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Book"
  /books/{id}:
    get:
      summary: "Get book by ID"
      operationId: "getBook"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "Book details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: "Book not found"
  /quotes:
    get:
      summary: "Get all quotes with optional filters"
      operationId: "getAllQuotes"
      parameters:
      - name: "author"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "category"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "A list of quotes"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Quote"
  /quotes/{id}:
    get:
      summary: "Get quote by ID"
      operationId: "getQuote"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "Quote details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        "404":
          description: "Quote not found"
components:
  schemas:
    Event:
      type: "object"
      required:
      - "title"
      - "date"
      - "category"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        description:
          type: "string"
          nullable: true
        date:
          type: "string"
          format: "date-time"
        category:
          type: "string"
        tags:
          type: "array"
          nullable: true
          items:
            type: "string"
    CodingProblem:
      type: "object"
      required:
      - "title"
      - "difficulty"
      - "category"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        description:
          type: "string"
          nullable: true
        difficulty:
          type: "string"
          enum:
          - "Easy"
          - "Medium"
          - "Hard"
        category:
          type: "string"
        tags:
          type: "array"
          items:
            type: "string"
        sourceUrl:
          type: "string"
          format: "uri"
        solutionUrl:
          type: "string"
          format: "uri"
          nullable: true
    Book:
      type: "object"
      required:
      - "title"
      - "author"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        author:
          type: "string"
        category:
          type: "string"
        publishedDate:
          type: "string"
          format: "date"
        summary:
          type: "string"
          nullable: true
    Quote:
      type: "object"
      required:
      - "text"
      - "author"
      properties:
        id:
          type: "integer"
          format: "int64"
        text:
          type: "string"
        author:
          type: "string"
        tags:
          type: "array"
          items:
            type: "string"
